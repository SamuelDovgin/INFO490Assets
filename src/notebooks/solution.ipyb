{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AssnTemplate.ipynb","provenance":[{"file_id":"https://github.com/fbkarsdorp/python-course/blob/master/answerbook/Chapter%2010%20-%20Learning%20without%20Supervision.ipynb","timestamp":1583470815612}],"collapsed_sections":["1h0w6rv9rsWw","QCeuhWSbrsXJ","kCcjhChBrsXP","JAetoKuFrsXc","Eeg8GyDzrsXp"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"9b4ffd9f9eaa4c87b3ac7b1a1181684f":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","state":{"_view_name":"ButtonView","style":"IPY_MODEL_83f9d1b2d085443a83053832e9dfd48d","_dom_classes":[],"description":"No Tests","_model_name":"ButtonModel","button_style":"","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","tooltip":"","_view_count":null,"disabled":false,"_view_module_version":"1.5.0","layout":"IPY_MODEL_3532e05afe484d398e82fa56bbc462c5","_model_module":"@jupyter-widgets/controls","icon":""}},"5299f56392524174bf83717582f9ddb0":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","state":{"_view_name":"StyleView","_model_name":"ButtonStyleModel","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"button_color":null,"font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"3532e05afe484d398e82fa56bbc462c5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"77e7d35e169a401db8244a7b66e705ac":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"stream","metadata":{"tags":[]},"text":"Application Killed: 2.974693\n","stream":"stdout"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_af46c5a9af874243bccf4d655e52f69a","_model_module":"@jupyter-widgets/output"}},"83f9d1b2d085443a83053832e9dfd48d":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","state":{"_view_name":"StyleView","_model_name":"ButtonStyleModel","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"button_color":"yellow","font_weight":"","_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"BdXjGnvE43VI","colab_type":"text"},"source":["#NoteBook Preparation\n"]},{"cell_type":"markdown","metadata":{"id":"02rXOrfd7i_r","colab_type":"text"},"source":["**Step 1**: \n","After making a copy of the orginal notebook  \n","\n","*   Change the name\n","*   Make sure this notebook readable by selecting Share (this allows for testing)\n","![alt text](https://raw.githubusercontent.com/NSF-EC/INFO490Assets/master/colab/share.png)\n","\n","Copy the document ID from the share URL into the variable `NOTEBOOK_ID` in the next cell (and run that cell)"]},{"cell_type":"code","metadata":{"id":"-HEc0kzP7YNS","colab_type":"code","colab":{}},"source":["# be sure to run me after filling it in\n","NOTEBOOK_ID = '1ymVhzIS-TCKhOx28jWEQ3E2IxWscGwwA'  # change me!!\n","LESSON_ID   = 'LinearAlgebra:1:1' # keep this as is\n","LESSON_ID = '00'               "],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ixuKzBbZ8IA6","colab_type":"text"},"source":["**Step 2**: install the INFO490 git repository (run this cell)\n"]},{"cell_type":"code","metadata":{"id":"n9slTObFLRP_","colab_type":"code","outputId":"1e18f8cd-774b-4434-d001-d4ad9800ba1c","executionInfo":{"status":"ok","timestamp":1583776762870,"user_tz":420,"elapsed":2112,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["!git clone https://github.com/NSF-EC/INFO490Assets.git info490\n","#!cd info490; git pull; cd .. # if a pull is done, need to refresh the modules via importlib or restart runtime"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Cloning into 'info490'...\n","remote: Enumerating objects: 300, done.\u001b[K\n","remote: Counting objects: 100% (300/300), done.\u001b[K\n","remote: Compressing objects: 100% (217/217), done.\u001b[K\n","remote: Total 300 (delta 144), reused 222 (delta 71), pack-reused 0\u001b[K\n","Receiving objects: 100% (300/300), 121.71 KiB | 11.06 MiB/s, done.\n","Resolving deltas: 100% (144/144), done.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"SU1laGmDta6A"},"source":["**Step 3**: install testing framework (after you run this cell, it should say: *Hello!* )\n","A few notes on testing:\n","*   You will need to re-run steps 2, 3 if you reconnect \n","*   The testing framework reads the version saved on your google drive. Each test prints the timestamp of the last save.\n","*   When you change your code, the notebook is **not** *immediately* saved.  \n","*   You can use the File Menu (File->Save) to force the notebook to save if the autosave hasn't run since your latest code change\n"]},{"cell_type":"code","metadata":{"id":"AI1W5DTaeFh5","colab_type":"code","outputId":"84b0698c-b4e6-4c67-aef6-ddaaee5c0b23","executionInfo":{"status":"ok","timestamp":1583776767251,"user_tz":420,"elapsed":849,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def install_testing_framework(notebook_id, lesson_id):\n","    import sys\n","    sys.path.append('info490/src')\n","    class Nop(object):\n","        def __init__(self, e): self.e = e\n","        def nop(self, *args, **kw): return(\"unable to test:\", self.e)\n","        def __getattr__(self, _): return self.nop\n","    try:\n","        from utils import Tools,Client\n","        import importlib\n","        importlib.reload(Tools)\n","        importlib.reload(Client)\n","        return Tools.TestFramework(notebook_id, Client.ClientTest(lesson_id))\n","    except ImportError as e:\n","        # happens on the test side, or if code never mounted\n","        return Nop(str(e))\n","\n","tester = install_testing_framework(NOTEBOOK_ID, LESSON_ID)\n","tester.hello_world()"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Hello! 1583736446576 Mon Mar  9 06:47:26 2020\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YWS3B3xaLTd7","colab_type":"code","outputId":"fdafd8cf-781a-46f2-dd69-7733cd0c5389","executionInfo":{"status":"ok","timestamp":1583776792243,"user_tz":420,"elapsed":449,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["9b4ffd9f9eaa4c87b3ac7b1a1181684f","5299f56392524174bf83717582f9ddb0","3532e05afe484d398e82fa56bbc462c5","77e7d35e169a401db8244a7b66e705ac","83f9d1b2d085443a83053832e9dfd48d"]}},"source":["def simple_add(a,b):\n","  while(True):\n","    #pass\n","  return a+b\n","\n","tester.test_with_button(simple_add)\n","#print(tester.test_function(simple_addr))"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"9b4ffd9f9eaa4c87b3ac7b1a1181684f","version_minor":0,"version_major":2},"text/plain":["Button(description='Test simple_add', style=ButtonStyle())"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"77e7d35e169a401db8244a7b66e705ac","version_minor":0,"version_major":2},"text/plain":["Output()"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"vzpYk6JpHe-X","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f_pYtNeIrsWD","colab_type":"text"},"source":["#Chapter 10 - Learning without Supervision"]},{"cell_type":"markdown","metadata":{"id":"A5O9wME7rsWG","colab_type":"text"},"source":["-- *A Python Course for the Humanities*"]},{"cell_type":"markdown","metadata":{"id":"L7-KvXw4rsWH","colab_type":"text"},"source":["---"]},{"cell_type":"code","metadata":{"id":"USH8uADGUA51","colab_type":"code","colab":{}},"source":["# https://www.dataquest.io/blog/advanced-jupyter-notebooks-tutorial/\n","## https://towardsdatascience.com/google-drive-google-colab-github-dont-just-read-do-it-5554d5824228\n","# https://colab.research.google.com/github/fbkarsdorp/python-course/blob/master/answerbook/Chapter%2010%20-%20Learning%20without%20Supervision.ipynb#scrollTo=GVu_RoIarsWI\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PUIK3MoFyTib","colab_type":"code","colab":{}},"source":["\n","def hello_world(a,b):\n","  return a + b\n","  \n","#tester.test_function(hello_world)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qOS0q-Gib6CC","colab_type":"text"},"source":["# ![alt text](https://)"]},{"cell_type":"markdown","metadata":{"id":"tfObrl1xSafz","colab_type":"text"},"source":["<div class=\"warning\">\n","  Some content\n","</div>"]},{"cell_type":"markdown","metadata":{"id":"GVu_RoIarsWI","colab_type":"text"},"source":["<img src=\"https://github.com/fbkarsdorp/python-course/blob/master/images/cluster.png?raw=1\" alt=\"cluster\" style=\"width: 280px;\" align=\"right\"/>\n","In the previous chapter we have developed a system that on the basis of examples attempts to learn a function to classify new, unseen examples. Not always do we have the luxury of a labeled data set. In fact, most of the time only unlabeled data is available. In unsupervized machine learning, or learning without supervision, we attempt the create systems that detect patterns in our data, such as groupings or clusters. Given a collection of texts, we could for example try to measure the pairwise distances between all texts and given these distances construct a grouping of the texts. Another example of unsupervized learning is the popular method of *Topic Modeling* in which we attempt to find clusters of semantically coherent words that together form a topic. \n","\n","In this chapter we will introduce you to some of the techniques to cluster you data without supervision. As is the case with supervized learning, there are many different approaches to clustering. We will discuss one of the most popular ones: hierachical agglomerative clustering. We will develop a general hierarchical cluster module and implement a number of different cluster procedures. "]},{"cell_type":"markdown","metadata":{"id":"0G1SIKoxrsWK","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"wJGN-X-_rsWL","colab_type":"text"},"source":["##Hierarchical Clustering"]},{"cell_type":"markdown","metadata":{"id":"z1CyYc36rsWM","colab_type":"text"},"source":["All cluster techniques follow a similar procedure. We start with a data set consisting of $n$ different data points. The end state will be a data set with $k$ clusters each consisting of a number of original data points. The cluster procedure iteratively moves through all data points and assigns each data point to a particular cluster. Cluster techniques differ with respect to how the merging of data points happens. In this section we will look at hierarchical clustering, which is a clustering method that builds hierarchies of clusters. Typically hierarchical clustering techniques construct a so-called dendrogram, which has a top or root node covering all other data points. The leaf nodes of the dendrogram, or cluster tree, consists of all original data points. If we think of the original datapoints as singleton clusters, hierarchical clustering is an iterative procedure in which in each iteration two clusters are merged into a new cluster. This process is repeated until we arrive at the root node.\n","\n","At each iteration, the two clusters with the highest similarity combined. The definition of what counts as being similar is what differentiates between the different hierarchical clustering methods. One popular clustering method is **single-linkage clustering**. Mathematically, the single linkage function – the distance $D(X,Y)$ between clusters $X$ and $Y$ – is described by the expression\n","\n","$$D(X,Y)=\\min_{x\\in X, y\\in Y} d(x,y),$$\n","\n","where $X$ and $Y$ are any two clusters, and $d(x,y)$ represents the distance between the two data points $x$ and $y$. The two clusters $A$ and $B$ of which $D(A,B)$ is the smallest are merged into a new cluster $C$.\n","\n","Let's have a look at a small example to make this all a little more concrete. The following table presents a data set of apples. Each apple is described according to a number of different features:\n","\n","\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>quality</th>\n","      <th>color</th>\n","      <th>firmness</th>\n","      <th>taste</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td> bad</td>\n","      <td>    red</td>\n","      <td> firm</td>\n","      <td> sweet</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td> bad</td>\n","      <td>    red</td>\n","      <td> firm</td>\n","      <td> sweet</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td> bad</td>\n","      <td> yellow</td>\n","      <td> firm</td>\n","      <td>  sour</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td> good</td>\n","      <td>    red</td>\n","      <td> soft</td>\n","      <td>  sour</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td> good</td>\n","      <td> yellow</td>\n","      <td> soft</td>\n","      <td> sweet</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td> bad</td>\n","      <td> yellow</td>\n","      <td> firm</td>\n","      <td>  sour</td>\n","    </tr>\n","  </tbody>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"_4Y-Jo4BrsWN","colab_type":"text"},"source":["To construct clusters from these items, we need have some way to compute the distance or similarity between two items. A very simple distance method would be to take the length of the difference between the feature values of two apples $A$ and $B$:\n","\n","$$ A \\cup B = \\{ x: x \\in A | x \\not\\in B\\} $$\n","\n","Take apple$_0$ and apple$_2$ as an example:"]},{"cell_type":"code","metadata":{"id":"GPdX2zdMrsWO","colab_type":"code","outputId":"8862119f-fae0-46bd-c643-8f4758e0eac0","executionInfo":{"status":"ok","timestamp":1583729462567,"user_tz":420,"elapsed":5186,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["apple_a = {\"bad\", \"red\", \"firm\", \"sweet\"}\n","apple_b = {\"bad\", \"yellow\", \"firm\", \"sour\"}\n","len(apple_a.difference(apple_b))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"markdown","metadata":{"id":"7e3edfTqrsWS","colab_type":"text"},"source":["We can do the same thing for all items to obtain the pairwise distances between all apples:"]},{"cell_type":"code","metadata":{"id":"nQCU8RQarsWS","colab_type":"code","colab":{}},"source":["apples = [(0, {\"bad\", \"red\", \"firm\", \"sweet\"}), \n","          (1, {\"bad\", \"red\", \"firm\", \"sour\"}),\n","          (2, {\"bad\", \"yellow\", \"firm\", \"sour\"}),\n","          (3, {\"good\", \"red\", \"soft\", \"sour\"}),\n","          (4, {\"good\", \"yellow\", \"soft\", \"sweet\"}),\n","          (5, {\"bad\", \"yellow\", \"firm\", \"sour\"})]\n","\n","n = len(apples)\n","distances = [[0 for i in range(n)] for _ in range(n)]\n","for i in range(n):\n","    for j in range(i):\n","        distance = len(apples[i][1].difference(apples[j][1]))\n","        distances[i][j] = distance\n","        distances[j][i] = distances[i][j]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DSxb2eqSrsWW","colab_type":"text"},"source":["The result is a distance matrix in which for each combination of items the distance is given:"]},{"cell_type":"code","metadata":{"id":"wNroeMtOrsWX","colab_type":"code","outputId":"07c053a3-ae38-4868-87f5-2c6bcfc9c74b","executionInfo":{"status":"ok","timestamp":1583729462568,"user_tz":420,"elapsed":5180,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["distances"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, 1, 2, 3, 3, 2],\n"," [1, 0, 1, 2, 4, 1],\n"," [2, 1, 0, 3, 3, 0],\n"," [3, 2, 3, 0, 2, 3],\n"," [3, 4, 3, 2, 0, 3],\n"," [2, 1, 0, 3, 3, 0]]"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"markdown","metadata":{"id":"BSO4zBJursWa","colab_type":"text"},"source":["If you look closely, you'll notice that the upper and lower triangle of the matrix are the same. Now that we have all pairwise distances, we can start clustering the examples. We have to start with merging the two clusters of which the data points are most similar. Can you figure out which clusters are most similar to each other?\n","\n","Indeed, the clusters containing apple$_2$ and apple$_5$. Let's merge these two clusters into a new cluster:"]},{"cell_type":"code","metadata":{"id":"EifTiGAIrsWb","colab_type":"code","outputId":"44948ff6-ca7b-4f0a-edde-f55c82f70194","executionInfo":{"status":"ok","timestamp":1583729462569,"user_tz":420,"elapsed":5176,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["apples[2] = (6, (apples[2], apples[5]))\n","del apples[5]\n","apples"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(0, {'bad', 'firm', 'red', 'sweet'}),\n"," (1, {'bad', 'firm', 'red', 'sour'}),\n"," (6,\n","  ((2, {'bad', 'firm', 'sour', 'yellow'}),\n","   (5, {'bad', 'firm', 'sour', 'yellow'}))),\n"," (3, {'good', 'red', 'soft', 'sour'}),\n"," (4, {'good', 'soft', 'sweet', 'yellow'})]"]},"metadata":{"tags":[]},"execution_count":97}]},{"cell_type":"markdown","metadata":{"id":"TWZ4P7PprsWf","colab_type":"text"},"source":["We now continue our clustering procedure and again select the two items that are most similar to each other. We see that $D(\\text{apple$_0$}, \\text{apple$_1$}) = 1$. The same holds for $D(\\text{apple$_1$}, \\text{apple$_2$})$ and $D(\\text{apple$_1$}, \\text{apple$_5$})$. In such cases we choose one of these pairs at random. Let's go for the pair of apple$_0$ and apple$_1$ and merge these two into a new cluster:"]},{"cell_type":"code","metadata":{"id":"Q39VJWLBrsWf","colab_type":"code","outputId":"52768c77-a9d7-4177-d2cb-86c2f5aaf120","executionInfo":{"status":"ok","timestamp":1583729462569,"user_tz":420,"elapsed":5171,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["apples[0] = (7, (apples[0], apples[1]))\n","del apples[1]\n","apples"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(7,\n","  ((0, {'bad', 'firm', 'red', 'sweet'}), (1, {'bad', 'firm', 'red', 'sour'}))),\n"," (6,\n","  ((2, {'bad', 'firm', 'sour', 'yellow'}),\n","   (5, {'bad', 'firm', 'sour', 'yellow'}))),\n"," (3, {'good', 'red', 'soft', 'sour'}),\n"," (4, {'good', 'soft', 'sweet', 'yellow'})]"]},"metadata":{"tags":[]},"execution_count":98}]},{"cell_type":"markdown","metadata":{"id":"q9k2T2vMrsWi","colab_type":"text"},"source":["We continue and select the next pair with the shortest distance. This is $D(\\text{apple$_1$}, \\text{apple$_2$})$. Since apple$_1$ is in cluster 7 and apple$_2$ in cluster 6, we now merge cluster 6 and 7:"]},{"cell_type":"code","metadata":{"id":"u-GIOXgOrsWj","colab_type":"code","outputId":"973f79ab-3d0a-4b1b-a102-2c0257b22690","executionInfo":{"status":"ok","timestamp":1583729462570,"user_tz":420,"elapsed":5168,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":170}},"source":["apples[0] = (8, (apples[0], apples[1]))\n","del apples[1]\n","apples"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(8,\n","  ((7,\n","    ((0, {'bad', 'firm', 'red', 'sweet'}),\n","     (1, {'bad', 'firm', 'red', 'sour'}))),\n","   (6,\n","    ((2, {'bad', 'firm', 'sour', 'yellow'}),\n","     (5, {'bad', 'firm', 'sour', 'yellow'}))))),\n"," (3, {'good', 'red', 'soft', 'sour'}),\n"," (4, {'good', 'soft', 'sweet', 'yellow'})]"]},"metadata":{"tags":[]},"execution_count":99}]},{"cell_type":"markdown","metadata":{"id":"7K3_zOK9rsWm","colab_type":"text"},"source":["Next on our list is the pair of apple$_3$ and apple$_4$:"]},{"cell_type":"code","metadata":{"id":"FTfMagnDrsWn","colab_type":"code","outputId":"c5ef1194-d471-4fe9-9db0-890f41aa69bf","executionInfo":{"status":"ok","timestamp":1583729462570,"user_tz":420,"elapsed":5163,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["apples[1] = (9, (apples[1], apples[2]))\n","del apples[2]\n","apples"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(8,\n","  ((7,\n","    ((0, {'bad', 'firm', 'red', 'sweet'}),\n","     (1, {'bad', 'firm', 'red', 'sour'}))),\n","   (6,\n","    ((2, {'bad', 'firm', 'sour', 'yellow'}),\n","     (5, {'bad', 'firm', 'sour', 'yellow'}))))),\n"," (9,\n","  ((3, {'good', 'red', 'soft', 'sour'}),\n","   (4, {'good', 'soft', 'sweet', 'yellow'})))]"]},"metadata":{"tags":[]},"execution_count":100}]},{"cell_type":"markdown","metadata":{"id":"Mrv7OUzdrsWq","colab_type":"text"},"source":["We conclude the clustering procedure by merging the last two clusters:"]},{"cell_type":"code","metadata":{"id":"I8evI-IdrsWr","colab_type":"code","outputId":"c7d02985-46ba-4218-a232-3029fe3d6bea","executionInfo":{"status":"ok","timestamp":1583729462937,"user_tz":420,"elapsed":5525,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["apples[0] = (10, (apples[0], apples[1]))\n","del apples[1]\n","apples"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(10,\n","  ((8,\n","    ((7,\n","      ((0, {'bad', 'firm', 'red', 'sweet'}),\n","       (1, {'bad', 'firm', 'red', 'sour'}))),\n","     (6,\n","      ((2, {'bad', 'firm', 'sour', 'yellow'}),\n","       (5, {'bad', 'firm', 'sour', 'yellow'}))))),\n","   (9,\n","    ((3, {'good', 'red', 'soft', 'sour'}),\n","     (4, {'good', 'soft', 'sweet', 'yellow'})))))]"]},"metadata":{"tags":[]},"execution_count":101}]},{"cell_type":"markdown","metadata":{"id":"yuf48Ay7rsWu","colab_type":"text"},"source":["What does our clustering tell us? We can distinguish two main groups: cluster 8 (consisting of apple$_0$, apple$_1$, apple$_2$ and apple$_5$), and cluster 9 (consisting of apple$_3$ and apple$_4$). These two clusters seem to point out that the quality of the apples is considered on the basis of their firmness and that, apparently, soft apples are considered to be better than hard apples.\n","\n","Hopefully, you will now have a better feeling of hierarchical clustering and what the single linkage method is about. It is about time that we start with our own implementation of the hierarchical clustering algorithm."]},{"cell_type":"markdown","metadata":{"id":"mP-VTS-YrsWv","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"1h0w6rv9rsWw","colab_type":"text"},"source":["####Quiz!"]},{"cell_type":"markdown","metadata":{"id":"ceXmwqxfrsWx","colab_type":"text"},"source":["**a)** We will begin with implementing a simple similarity metric, called the **Jaccard Distance**. This metric computes the dissimilarity between two sets by dividing the difference of the sizes of the union and the intersection of two sets by the size of their union:\n","\n","$$d_J(A,B) = 1 - J(A,B) = { { |A \\cup B| - |A \\cap B| } \\over |A \\cup B| }$$"]},{"cell_type":"code","metadata":{"id":"VB8eXt7qrsWy","colab_type":"code","outputId":"986fef55-163c-4983-cf8a-4ba37e463f88","executionInfo":{"status":"ok","timestamp":1583729462938,"user_tz":420,"elapsed":5520,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["def jaccard_distance(a, b):\n","    # insert your code here\n","    union_len = len(a.union(b))\n","    return (union_len - len(a.intersection(b))) / union_len\n","\n","# these tests should return True if your code is correct\n","print(jaccard_distance({'a', 'b', 'c'}, {'b', 'c', 'a'}) == 0.0)\n","print(round(jaccard_distance({'a', 'b', 'c'}, {'b', 'c'}), 2) == 0.33)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n","True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vbEIyyrQrsW1","colab_type":"text"},"source":["**b)** Write a function `pairwise_distances` that takes as input a list of examples and some distance function and returns a matrix represented by a nested list which contains all pairwise distances."]},{"cell_type":"code","metadata":{"id":"KfUsBe-VrsW2","colab_type":"code","outputId":"11c952c9-a89e-42d4-c2cd-5e3bba7549fd","executionInfo":{"status":"ok","timestamp":1583729462938,"user_tz":420,"elapsed":5516,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["def pairwise_distances(X, distance_fn=jaccard_distance):\n","    # insert your code here\n","    n = len(X)\n","    distances = [[0 for i in range(n)] for _ in range(n)]\n","    for i in range(n):\n","        for j in range(i):\n","            distances[i][j] = distance = distance_fn(X[i], X[j])\n","            distances[j][i] = distance\n","    return distances\n","\n","# these tests should return True if your code is correct\n","X = [{'a', 'f', 'c'}, {'b', 'd', 'a'}, {'a', 'b', 'c'}, {'f', 'b', 'c'}]\n","print(pairwise_distances(X) == [[0,   0.8, 0.5, 0.5],\n","                               [0.8, 0,   0.5, 0.8],\n","                               [0.5, 0.5, 0,   0.5],\n","                               [0.5, 0.8, 0.5, 0  ]])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VdUTsY29rsW5","colab_type":"text"},"source":["**c)** Next, we will write a function that takes as input a distance matrix represented as a nested list and returns two indexes $i$ and $j$ corresponding to the two clusters $A, B$ with the smallest distance $D(A, B)$:"]},{"cell_type":"code","metadata":{"id":"1bcnqp_ersW5","colab_type":"code","outputId":"b41dfd6a-2734-46d8-e9e4-767e83406843","executionInfo":{"status":"ok","timestamp":1583729462938,"user_tz":420,"elapsed":5512,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["from itertools import combinations\n","\n","def smallest_distance(dm):\n","    # insert your code here\n","    return min(combinations(range(len(dm)), 2), key=lambda i: dm[i[0]][i[1]])\n","\n","# these tests should return True if your code is correct\n","distances = [[0, 1, 2, 3, 3, 2],\n","             [1, 0, 1, 2, 4, 1],\n","             [2, 1, 0, 3, 3, 0],\n","             [3, 2, 3, 0, 2, 3],\n","             [3, 4, 3, 2, 0, 3],\n","             [2, 1, 0, 3, 3, 0]]\n","print(smallest_distance(distances) == (2, 5))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Eu1qIAr-rsW8","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"7I4uaR8jrsW9","colab_type":"text"},"source":["So, we have created a function to compute the distance between two sets, a function to compute the pairwise distances between items given a distance function and a function to extract the indices corresponding to the clusters with the smallest distance. Next, we need to define a data structure to represent the hierarchical tree of clusters. First, we will define a class named `Cluster` which represents a single node in a cluster tree. A `Cluster` consists of a cluster ID, and a list of its child nodes. A `Cluster` object is actually no more than a nested list in Python where each list has a unique ID. We therefore define `Cluster` as a subclass of a `list` object:"]},{"cell_type":"code","metadata":{"id":"JifBt3pTrsW-","colab_type":"code","colab":{}},"source":["class Cluster(list):\n","    \"\"\"Represents a Cluster node in a Dendrogram. A Cluster can be\n","    initialized using \n","    \n","    >>> c = Cluster(1)\n","    \n","    to create a cluster leaf node with id=1. You can also initialize \n","    a non-terminal `Cluster` node using\n","    \n","    >>> c = Cluster(3, Cluster(1), Cluster(2))\n","    \n","    where Cluster(1) and Cluster(2) are the children of Cluster(3).\"\"\"\n","        \n","    def __init__(self, id, *children):\n","        self.id = id\n","        super(Cluster, self).__init__(children)\n","        \n","    def __repr__(self):\n","        childstr = \", \".join(str(c) for c in self)\n","        if self:\n","            return '%s(%s, [%s])' % (type(self).__name__, self.id, childstr)\n","        return '%s(%s)' % (type(self).__name__, self.id)\n","    \n","    def __str__(self):\n","        return self.pprint()\n","    \n","    def pprint(self, indent=0):\n","        s = '%s(%s' % (type(self).__name__, self.id)\n","        for child in self:\n","            if child:\n","                s += '\\n' + ' ' * (indent + 2) + child.pprint(indent=indent+2)\n","            else:\n","                s += '\\n' + ' ' * (indent + 2) + '%r' % child\n","        return s + ')'"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"P5E5zW0ursXC","colab_type":"text"},"source":["We create a new `Cluster` using:"]},{"cell_type":"code","metadata":{"id":"p7Em12eMrsXD","colab_type":"code","colab":{}},"source":["c1 = Cluster(1)\n","c2 = Cluster(2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6qHIJMs1rsXG","colab_type":"text"},"source":["To create a non-terminal `Cluster` we initialize a `Cluster` object as follows:"]},{"cell_type":"code","metadata":{"id":"BFnxBCCcrsXG","colab_type":"code","outputId":"3a1c7cae-9ef2-4b9a-bb74-e6f9830e40f4","executionInfo":{"status":"ok","timestamp":1583729462940,"user_tz":420,"elapsed":5507,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["print(Cluster(3, c1, c2))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Cluster(3\n","  Cluster(1)\n","  Cluster(2))\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bzU3iRjprsXI","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"QCeuhWSbrsXJ","colab_type":"text"},"source":["####Quiz!"]},{"cell_type":"markdown","metadata":{"id":"09O-662MrsXK","colab_type":"text"},"source":["A `ClusterTree` is an object that consists of multiple `Cluster` objects. At initialization, each `Cluster` node obtains an ID within the range 0 to $n$ where $n$ is the number of data points to be clustered. You can also pass a list of labels to the `labels` argument of the constructor, which will then be used as ID's. The class `ClusterTree` is responsible for merging two `Cluster` nodes into a new `Cluster`. Complete the method `merge`. It takes as input two indices $i$ and $j$, corresponding to two `Cluster` objects $C_i$ and $C_j$. These two clusters are merged into a new cluster which takes the original position of cluster $C_i$. Don't forget to remove cluster $C_j$ and initialize the new cluster with an appropriate ID."]},{"cell_type":"code","metadata":{"id":"Eo5WLVGOrsXK","colab_type":"code","outputId":"a64bd6a2-db56-404c-8030-03e596f1c5b0","executionInfo":{"status":"ok","timestamp":1583729462940,"user_tz":420,"elapsed":5503,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["class ClusterTree:\n","    \"\"\"A ClusterTree, or Dendrogram consists of one or more\n","    `Cluster` objects. Initialize a `ClusterTree` using\n","    \n","    >>> tree = ClusterTree(n=10)\n","    \n","    where n is the number of original data points to be clustered.\"\"\"\n","    \n","    def __init__(self, n, labels=None):\n","        self._n = n\n","        if labels is None:\n","            labels = range(n)\n","        self._clusters = [Cluster(i) for i in labels]\n","    \n","    def merge(self, i, j):\n","        # insert your code here\n","        self._clusters[i] = Cluster(self._n, self._clusters[i], self._clusters.pop(j))\n","        self._n += 1\n","    \n","    def __str__(self):\n","        return '%s' % self._clusters[0]\n","        \n","# these tests should return True if your code is correct\n","tree = ClusterTree(5)\n","tree.merge(1, 2)\n","print(len(tree._clusters[1]) == 2)\n","print(tree._clusters[1].id == 5)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n","True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PMuPfnyHrsXN","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"_Wyd5PCmrsXN","colab_type":"text"},"source":["Now it's time for the most tricky part of our clustering algorithm: computing the linkage function. We have already implemented a function that extracts the two indices corresponding to the two clusters that are closest to each other. But how do we find the indices of two clusters when they have been merged? One way would be to recursively go through the `ClusterTree` and extract the indices from there. There is however another way which makes it possible to use the same `smallest_distance` function at each iteration of the clustering procedure. As we will see this method is particularly beneficial because it will allow us to implement a number of different linkage functions in a elegant and simple way.\n","\n","Recall that in the single linkage function – the distance $D(X,Y)$ between clusters $X$ and $Y$ – is described by the expression\n","\n","$$D(X,Y)=\\min_{x\\in X, y\\in Y} d(x,y),$$\n","\n","where $X$ and $Y$ are any two clusters, and $d(x,y)$ represents the distance between the two data points $x$ and $y$. Since we are only interested in the minimal distance of ${x\\in X, y\\in Y}$, we can store that information directly in our distance matrix. Let's go through an example to show you more clearly what this means.\n","\n","Say we have a distance matrix containing the pairwise distance between 6 clusters:\n","\n","    distances = [[0, 1, 2, 3, 3, 1],\n","                 [ , 0, 1, 2, 4, 1],\n","                 [ ,  , 0, 3, 3, 0],\n","                 [ ,  ,  , 0, 2, 3],\n","                 [ ,  ,  ,  , 0, 3],\n","                 [ ,  ,  ,  ,  , 0]]\n","                 \n","The smallest distance can be found between cluster 2 and cluster 5, which can be obtained using our function `smallest_distance`:\n","\n","    >>> smallest_distance(distances)\n","    (2, 5)\n","    \n","So far we haven't done anything different. Here comes the crucial step. Before we enter the next iteration of our clustering procedure, we update the distance matrix to reflect the minimal distances between all clusters with respect to cluster 2 and cluster 5. For example, we compare cluster 0 to both cluster 2 and cluster 5. The distance between cluster 0 and cluster 2 is 2. The distance between cluster 0 and cluster 5 is 1, which is the smallest. We update the largest distance (between cluster 0 and cluster 2) to 1 to represent the minimal distance between 0 and any of cluster 2 or cluster 5:\n","\n","    distances = [[0, 1, 1, 3, 3, 1],\n","                 [ , 0, 1, 2, 4, 1],\n","                 [ ,  , 0, 3, 3, 0],\n","                 [ ,  ,  , 0, 2, 3],\n","                 [ ,  ,  ,  , 0, 3],\n","                 [ ,  ,  ,  ,  , 0]]\n","                 \n","we do this for all remaining clusters to obtain the following distance matrix:\n","\n","    distances = [[0, 1, 1, 3, 3, 1],\n","                 [ , 0, 1, 2, 4, 1],\n","                 [ ,  , 0, 3, 3, 0],\n","                 [ ,  ,  , 0, 2, 3],\n","                 [ ,  ,  ,  , 0, 3],\n","                 [ ,  ,  ,  ,  , 0]]\n","                 \n","Since all distances between any cluster and the cluster (2, 5) are now stored in both the rows and columns of cluster 2 and 5, we can remove one of them to obtain the following distance matrix.\n","\n","    distances = [[0, 1, 1, 3, 3],\n","                 [ , 0, 1, 2, 4],\n","                 [ ,  , 0, 3, 3],\n","                 [ ,  ,  , 0, 2],\n","                 [ ,  ,  ,  , 0]]\n","                 \n","From here on the same procedure is repeated until there is only one cluster left. So, again we extract the two indices corresponding to the two clusters that are closest to each other. \n","\n","    >>> smallest_distance(distances)\n","    (1, 2)\n","    \n","We update the distance matrix\n","\n","    distances = [[0, 1, 2, 3], \n","                 [ , 0, 3, 3], \n","                 [ ,  , 0, 2], \n","                 [ ,  ,  , 0]]\n","                 \n","and go on with the next iteration."]},{"cell_type":"markdown","metadata":{"id":"lefQGQRLrsXO","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"kCcjhChBrsXP","colab_type":"text"},"source":["####Quiz!"]},{"cell_type":"markdown","metadata":{"id":"UjNxFWRgrsXP","colab_type":"text"},"source":["**a)** Implement the function called `single_linkage`. It takes as input a distance matrix, and two indices $i$ and $j$ corresponding to the two clusters in the distance matrix that are closest to each other. Update the matrix according to the procedure described above and return the new matrix without row$_j$ and column$_j$."]},{"cell_type":"code","metadata":{"id":"biQ_B6lPrsXQ","colab_type":"code","outputId":"4c2af114-0823-4cf1-b910-795786cf241d","executionInfo":{"status":"ok","timestamp":1583729462940,"user_tz":420,"elapsed":5499,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["def single_linkage(dm, i, j):\n","    # insert your code here\n","    for k in range(len(dm)):\n","        if k != i and k != j:\n","            dm[i][k] = distance = min(dm[i][k], dm[j][k])\n","            dm[k][i] = distance\n","    dm = [[val for c, val in enumerate(row) if c != j] \n","               for r, row in enumerate(dm) if r != j]\n","    return dm\n","\n","# these tests should return True if your code is correct\n","\n","distances = [[0, 1, 2, 3, 3, 1],\n","             [1, 0, 1, 2, 4, 1],\n","             [2, 1, 0, 3, 3, 0],\n","             [3, 2, 3, 0, 2, 3],\n","             [3, 4, 3, 2, 0, 3],\n","             [1, 1, 0, 3, 3, 0]]\n","\n","print(single_linkage(distances, 2, 5) == [[0, 1, 1, 3, 3], \n","                                          [1, 0, 1, 2, 4], \n","                                          [1, 1, 0, 3, 3], \n","                                          [3, 2, 3, 0, 2], \n","                                          [3, 4, 3, 2, 0]])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TtPTiYLErsXS","colab_type":"text"},"source":["**b)** Great. Now that we have our linkage function in place, we start working on the final piece of the clustering algorithm: the main iterative loop, of which the skeleton is given below. Fill in the missing elements."]},{"cell_type":"code","metadata":{"id":"F7CcJD4LrsXT","colab_type":"code","outputId":"5797450d-2212-445c-d4d7-91b6e92dd605","executionInfo":{"status":"ok","timestamp":1583729462941,"user_tz":420,"elapsed":5496,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["def cluster(data_points, labels=None, linkage=single_linkage, distance_fn=jaccard_distance):\n","    # initialize a `ClusterTree` with n=len(data_points)\n","    tree = ClusterTree(len(data_points), labels=labels)\n","    # compute the pairwise distances between all data points \n","    # using the provided distance function\n","    dm = pairwise_distances(data_points, distance_fn=distance_fn) # insert your code here\n","    while len(dm) > 1:\n","        # extract the indices of the clusters corresponding to the \n","        # two closest clusters in the distance matrix\n","        i, j = smallest_distance(dm) # insert your code here\n","        # update the distance matrix using the provided linkage function\n","        dm = linkage(dm, i, j) # insert your code here\n","        # merge the two clusters in the ClusterTree:\n","        tree.merge(i, j) # insert your code here\n","    return tree\n","\n","# these tests should return True if your code is correct\n","apples = [{\"bad\", \"red\", \"firm\", \"sweet\"}, {\"bad\", \"red\", \"firm\", \"sour\"},\n","          {\"bad\", \"yellow\", \"firm\", \"sour\"}, {\"good\", \"red\", \"soft\", \"sour\"},\n","          {\"good\", \"yellow\", \"soft\", \"sweet\"}, {\"bad\", \"yellow\", \"firm\", \"sour\"}]\n","tree = cluster(apples)\n","print(tree._clusters[0].id == 10)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fvWWQa-YrsXV","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"vtedJch5rsXW","colab_type":"text"},"source":["Single linkage is just one of many different clustering strategies in hierarchical clustering. Another important linkage function is **complete linkage**. Complete linkage is very similar to single linkage except that we do not take the minimal distance between two clusters but the maximal distance. The distance $D(X,Y)$ between clusters $X$ and $Y$ — is described by the following expression\n","\n","$$D(X,Y)= \\max_{x\\in X, y\\in Y} d(x,y)$$\n","\n","where $d(x,y)$ is the distance between elements $x \\in X$ and $y \\in Y$. $X$ and $Y$ are both clusters. \n","\n","The difference between single linkage and complete linkage lies only in the function used to compute the distance of a cluster to all other clusters (i.e. `min` or `max`). We could write a function `complete_linkage` that is almost equal to our `single_linkage` function except for the function to compute the distances. However, this would imply that we repeat quite a bit of code, which is never good practice. Instead, we will make an abstraction over the two linkage functions in the function called `general_linkage`. This function takes the same arguments as our `single_linkage` function plus an argument that specifies the distance function used."]},{"cell_type":"code","metadata":{"id":"6WfwRvM9rsXW","colab_type":"code","colab":{}},"source":["def general_linkage(dm, i, j, distance_fn):\n","    for k in range(len(dm)):\n","        if k != i and k != j:\n","            dm[i][k] = distance = distance_fn(dm[i][k], dm[j][k])\n","            dm[k][i] = distance\n","    dm = [[val for c, val in enumerate(row) if c != j] \n","               for r, row in enumerate(dm) if r != j]\n","    return dm"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SgYDiqXjrsXY","colab_type":"text"},"source":["This general formulation allows us to redefine the `single_linkage` function as follows:"]},{"cell_type":"code","metadata":{"id":"P-OzdbrprsXZ","colab_type":"code","colab":{}},"source":["def single_linkage(dm, i, j):\n","    return general_linkage(dm, i, j, min)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3sH_U7FWrsXb","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"JAetoKuFrsXc","colab_type":"text"},"source":["####Quiz!"]},{"cell_type":"markdown","metadata":{"id":"DsoY0pr_rsXd","colab_type":"text"},"source":["Implement the complete_linkage function."]},{"cell_type":"code","metadata":{"id":"GONyZBskrsXe","colab_type":"code","outputId":"01ea3f31-a267-499c-8fe7-b2df8018722f","executionInfo":{"status":"ok","timestamp":1583729462942,"user_tz":420,"elapsed":5490,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["def complete_linkage(dm, i, j):\n","    # insert your code here\n","    return general_linkage(dm, i, j, max)\n","\n","# these tests should return True if your code is correct\n","\n","distances = [[0, 1, 2, 3, 3, 1],\n","             [1, 0, 1, 2, 4, 1],\n","             [2, 1, 0, 3, 3, 0],\n","             [3, 2, 3, 0, 2, 3],\n","             [3, 4, 3, 2, 0, 3],\n","             [1, 1, 0, 3, 3, 0]]\n","\n","complete_linkage(distances, 2, 5) == [[0, 1, 2, 3, 3],\n","                                      [1, 0, 1, 2, 4],\n","                                      [2, 1, 0, 3, 3],\n","                                      [3, 2, 3, 0, 2],\n","                                      [3, 4, 3, 2, 0]]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":113}]},{"cell_type":"markdown","metadata":{"id":"IzayE2CJrsXg","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lgrKl-d1rsXh","colab_type":"text"},"source":["##Practical: Clustering Distances of West-European Languages"]},{"cell_type":"markdown","metadata":{"id":"ew35TLmWrsXi","colab_type":"text"},"source":["Now that we have implemented all functions to perform hierarchical cluster analysis, let's apply the method to a more realistic and more interesting example than clustering apples. Within the family of Indo-European languages we can distinguish multiple sub-families, such as Germanic languages (e.g. German and Dutch) or Romance languages (e.g. French and Italian). In the cell below I listed the first 10 numerals in the variable `numerals` for each of the 10 languages stored in the variable `languages`:"]},{"cell_type":"code","metadata":{"id":"CcRijVt0rsXi","colab_type":"code","colab":{}},"source":["numerals = [\n","   [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"],\n","   [\"een\", \"twee\", \"drie\", \"vier\", \"vijf\", \"zes\", \"zeven\", \"acht\", \"negen\", \"tien\"],\n","   [\"ien\", \"twa\", \"trije\", \"fjouwer\", \"fiif\", \"seis\", \"san\", \"acht\", \"njoggen\", \"tsien\"],\n","   [\"eins\", \"zwei\", \"drei\", \"vier\", \"funf\", \"sechs\", \"sieben\", \"acht\", \"neun\", \"zehn\"],\n","   [\"en\", \"to\", \"tre\", \"fire\", \"fem\", \"seks\", \"sju\", \"atte\", \"ni\", \"ti\"],\n","   [\"én\", \"to\", \"tre\", \"fire\", \"fem\", \"seks\", \"syv\", \"otte\", \"ni\", \"ti\"],\n","   [\"en\", \"tva\", \"tre\", \"fyra\", \"fem\", \"sex\", \"sju\", \"atta\", \"nio\", \"tio\"],\n","   [\"uno\", \"dos\", \"tres\", \"cuatro\", \"cinco\", \"seis\", \"siete\", \"ocho\", \"nueve\", \"diez\"],\n","   [\"un\", \"deux\", \"trois\", \"quatre\", \"cinq\", \"six\", \"sept\", \"huit\", \"neuf\", \"dix\"],\n","   [\"uno\", \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\"]]\n","\n","languages = ['English', 'Dutch', 'Frisian', 'German', 'Norwegian', \n","             'Danish', 'Swedish', 'Spanish', 'French', 'Italian']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lTiVYuA4rsXm","colab_type":"text"},"source":["We apply hierarchical cluster analysis to investigate whether we can detect some interesting and meaningful groupings of these languages on the basis of their first 10 numerals. \n","\n","We first need to decide how to compute the distance between two languages. One simple way is to take the sum of the distances between each numeral in language $A$ and language $B$. Mathematically, the distance between two languages $A$ and $B$ is described by the following expression:\n","\n","$$ D(A, B) = \\sum^n_{i=1} d(A_i, B_i) $$\n","\n","$A$ and $B$ are two vectors with $n$ items and $d$ is some distance function. How do we compute the distance between two numerals like Dutch *een* and English *one*? There are more appropriate and advanced methods to compute this distance, but for the moment let's make use of the jaccard distance function, we defined above:"]},{"cell_type":"code","metadata":{"id":"LhE5gOa5rsXn","colab_type":"code","outputId":"8d26b05c-06cd-49d8-cfcd-32002b21e3a6","executionInfo":{"status":"ok","timestamp":1583729462943,"user_tz":420,"elapsed":5486,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["dutch_one = set(list(\"een\"))\n","english_one = set(list(\"one\"))\n","jaccard_distance(dutch_one, english_one)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3333333333333333"]},"metadata":{"tags":[]},"execution_count":115}]},{"cell_type":"markdown","metadata":{"id":"Rx5GkLTcrsXp","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"Eeg8GyDzrsXp","colab_type":"text"},"source":["####Quiz!"]},{"cell_type":"markdown","metadata":{"id":"24yot50ArsXq","colab_type":"text"},"source":["**a)** Write a function `summed_jaccard_distance` that takes as input two equally sized lists $A$ and $B$. Return $D(A, B) = \\sum^n_{i=1} d(A_i, B_i)$ where $d$ is the jaccard distance."]},{"cell_type":"code","metadata":{"id":"2MPYCXJursXr","colab_type":"code","outputId":"75db15d4-6768-4f11-df7d-d7dbbf89ca8d","executionInfo":{"status":"ok","timestamp":1583729462943,"user_tz":420,"elapsed":5481,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["def summed_jaccard_distance(A, B):\n","    # insert your code here\n","    return sum(jaccard_distance(set(list(a)), set(list(b))) for a, b in zip(A, B))\n","\n","# these tests should return True if your code is correct\n","print(round(summed_jaccard_distance(numerals[0], numerals[4]), 2) == 5.57)\n","print(round(summed_jaccard_distance(numerals[5], numerals[6]), 2) == 4.8)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["True\n","True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9IQHAGZFrsXt","colab_type":"text"},"source":["**b)** Perform a cluster analysis using single linkage and the summed jaccard distance on the numerals data. Report on your findings."]},{"cell_type":"code","metadata":{"id":"3KGlqxVHrsXu","colab_type":"code","outputId":"6ae1b1fb-10f5-48bf-de81-18a0c83ef215","executionInfo":{"status":"ok","timestamp":1583729462944,"user_tz":420,"elapsed":5478,"user":{"displayName":"mike haberman","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhkAz5Kw34a7Lihx1kGANt3HNCJCqXdA8dUvZr7=s64","userId":"02506289862669292688"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["solution = cluster(numerals, labels=languages, \n","                   distance_fn=summed_jaccard_distance) # insert your code here\n","print(solution)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Cluster(18\n","  Cluster(17\n","    Cluster(16\n","      Cluster(English)\n","      Cluster(14\n","        Cluster(13\n","          Cluster(Dutch)\n","          Cluster(German))\n","        Cluster(Frisian)))\n","    Cluster(11\n","      Cluster(10\n","        Cluster(Norwegian)\n","        Cluster(Danish))\n","      Cluster(Swedish)))\n","  Cluster(15\n","    Cluster(12\n","      Cluster(Spanish)\n","      Cluster(Italian))\n","    Cluster(French)))\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Amqv73WhrsXw","colab_type":"text"},"source":["**c)** This [website](http://www.zompist.com/numbers.htm) contains a data set with the numbers from 1 to 10 in over 5000 languages. Visit the website and add some other languages (preferably from different language families) to the data set. Run the analyis again and report on you findings."]},{"cell_type":"markdown","metadata":{"id":"O6JnfOIirsXx","colab_type":"text"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"JHrubsA8rsXz","colab_type":"text"},"source":["You've reached the end of the chapter. Ignore the code below, it's just here to make the page pretty:"]}]}